; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=riscv64 -mcpu=sifive-x280 -verify-machineinstrs < %s \
; RUN:   | FileCheck %s --check-prefix=DEFAULT
; RUN: llc -mtriple=riscv64 -mcpu=sifive-x280 -riscv-enable-schedule-same-vtype -verify-machineinstrs < %s \
; RUN:   | FileCheck %s --check-prefix=SAME-VTYPE-FIRST

define <vscale x 1 x i64> @test(<vscale x 1 x i64> %v64_0, <vscale x 1 x i64> %v64_1, <vscale x 1 x i32> %v32_0, <vscale x 1 x i32> %v32_1) {
; DEFAULT-LABEL: test:
; DEFAULT:       # %bb.0: # %entry
; DEFAULT-NEXT:    vsetvli a0, zero, e64, m1, ta, ma
; DEFAULT-NEXT:    vdiv.vv v12, v8, v9
; DEFAULT-NEXT:    vsetvli zero, zero, e32, mf2, ta, ma
; DEFAULT-NEXT:    vdiv.vv v13, v10, v11
; DEFAULT-NEXT:    vsetvli zero, zero, e64, m1, ta, ma
; DEFAULT-NEXT:    vadd.vv v8, v8, v9
; DEFAULT-NEXT:    vsetvli zero, zero, e32, mf2, ta, ma
; DEFAULT-NEXT:    vadd.vv v9, v10, v11
; DEFAULT-NEXT:    vsetvli zero, zero, e64, m1, ta, ma
; DEFAULT-NEXT:    vadd.vv v8, v8, v12
; DEFAULT-NEXT:    vsetvli zero, zero, e32, mf2, ta, ma
; DEFAULT-NEXT:    vadd.vv v9, v9, v13
; DEFAULT-NEXT:    vwadd.wv v8, v8, v9
; DEFAULT-NEXT:    ret
;
; SAME-VTYPE-FIRST-LABEL: test:
; SAME-VTYPE-FIRST:       # %bb.0: # %entry
; SAME-VTYPE-FIRST-NEXT:    vsetvli a0, zero, e64, m1, ta, ma
; SAME-VTYPE-FIRST-NEXT:    vadd.vv v12, v8, v9
; SAME-VTYPE-FIRST-NEXT:    vdiv.vv v8, v8, v9
; SAME-VTYPE-FIRST-NEXT:    vadd.vv v8, v12, v8
; SAME-VTYPE-FIRST-NEXT:    vsetvli zero, zero, e32, mf2, ta, ma
; SAME-VTYPE-FIRST-NEXT:    vadd.vv v9, v10, v11
; SAME-VTYPE-FIRST-NEXT:    vdiv.vv v10, v10, v11
; SAME-VTYPE-FIRST-NEXT:    vadd.vv v9, v9, v10
; SAME-VTYPE-FIRST-NEXT:    vwadd.wv v8, v8, v9
; SAME-VTYPE-FIRST-NEXT:    ret
entry:
  %0 = add <vscale x 1 x i64> %v64_0, %v64_1
  %1 = add <vscale x 1 x i32> %v32_0, %v32_1
  %2 = sdiv <vscale x 1 x i64> %v64_0, %v64_1
  %3 = sdiv <vscale x 1 x i32> %v32_0, %v32_1
  %4 = add <vscale x 1 x i64> %0, %2
  %5 = add <vscale x 1 x i32> %1, %3

  %6 = sext <vscale x 1 x i32> %5 to <vscale x 1 x i64>
  %7 = add <vscale x 1 x i64> %4, %6
  ret <vscale x 1 x i64> %7
}

